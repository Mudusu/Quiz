@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Quiz.Data
@using System.ComponentModel

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
            <section class="card shadow-sm border-0">
                <div class="card-body p-4 p-lg-5">
                    <div class="text-center mb-4">
                        <i class="bi bi-person-plus-fill text-primary" style="font-size: 2rem;"></i>
                        <h1 class="h3 fw-semibold mt-2 mb-0">Create your account</h1>
                        <p class="text-body-secondary mb-0">It's quick and easy</p>
                    </div>

                    <StatusMessage Message="@Message" />

                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger small" role="alert" />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-person-fill"></i>
                                </span>
                                <InputText id="username"
                                       @bind-Value="Input.UserName"
                                       class="form-control"
                                       aria-required="true"
                                       placeholder="Enter your username" />
                            </div>                            
                            <ValidationMessage For="() => Input.UserName" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email address</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-envelope-fill"></i>
                                </span>
                                <InputText id="email"
                                           @bind-Value="Input.Email"
                                           class="form-control"
                                           autocomplete="username"
                                           aria-required="true"
                                           placeholder="name@example.com" />
                            </div>
                            <ValidationMessage For="() => Input.Email" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-lock-fill"></i>
                                </span>
                                <InputText id="password"
                                           type="@(showPassword ? "text" : "password")"
                                           @bind-Value="Input.Password"
                                           class="form-control"
                                           autocomplete="new-password"
                                           aria-required="true"
                                           placeholder="••••••••" />
                                <button type="button"
                                        class="btn btn-outline-secondary"
                                        @onclick="ToggleShowPassword"
                                        aria-label="Toggle password visibility">
                                    <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => Input.Password" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm password</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <InputText id="confirmPassword"
                                           type="@(showConfirmPassword ? "text" : "password")"
                                           @bind-Value="Input.ConfirmPassword"
                                           class="form-control"
                                           autocomplete="new-password"
                                           aria-required="true"
                                           placeholder="••••••••" />
                                <button type="button"
                                        class="btn btn-outline-secondary"
                                        @onclick="ToggleShowConfirmPassword"
                                        aria-label="Toggle confirm password visibility">
                                    <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger small" />
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100 d-inline-flex align-items-center justify-content-center">
                            <i class="bi bi-person-plus me-2"></i>
                            Create account
                        </button>

                        <div class="text-center mt-3">
                            <span class="text-body-secondary">Already have an account?</span>
                            <a class="ms-1" href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                Sign in
                            </a>
                        </div>
                    </EditForm>
                </div>
            </section>

            @* <section class="text-center mt-4">
                <h6 class="text-body-secondary text-uppercase fw-semibold mb-2">Or sign up with</h6>
                <ExternalLoginPicker />
            </section> *@
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private bool showPassword;
    private bool showConfirmPassword;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private void ToggleShowPassword() => showPassword = !showPassword;
    private void ToggleShowConfirmPassword() => showConfirmPassword = !showConfirmPassword;

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
        [Display(Name = "Username")]
        public string UserName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
