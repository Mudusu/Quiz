@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Quiz.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-5">
            <section class="card shadow-sm border-0">
                <div class="card-body p-4 p-lg-5">
                    <div class="text-center mb-4">
                        <i class="bi bi-shield-lock-fill text-primary" style="font-size: 2rem;"></i>
                        <h1 class="h3 fw-semibold mt-2 mb-0">Log in</h1>
                        <p class="text-body-secondary mb-0">Access your account</p>
                    </div>

                    <StatusMessage Message="@errorMessage" />

                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger small" role="alert" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email address</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-envelope-fill"></i>
                                </span>
                                <InputText id="email"
                                           @bind-Value="Input.Email"
                                           class="form-control"
                                           autocomplete="username"
                                           aria-required="true"
                                           placeholder="name@example.com" />
                            </div>
                            <ValidationMessage For="() => Input.Email" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text bg-body-secondary">
                                    <i class="bi bi-lock-fill"></i>
                                </span>
                                <InputText id="password"
                                           type="@(showPassword ? "text" : "password")"
                                           @bind-Value="Input.Password"
                                           class="form-control"
                                           autocomplete="current-password"
                                           aria-required="true"
                                           placeholder="••••••••" />
                                <button type="button"
                                        class="btn btn-outline-secondary"
                                        @onclick="ToggleShowPassword"
                                        aria-label="Toggle password visibility">
                                    <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => Input.Password" class="text-danger small" />
                        </div>

                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="form-check form-switch">
                                <InputCheckbox id="rememberMe" @bind-Value="Input.RememberMe" class="form-check-input" />
                                <label class="form-check-label" for="rememberMe">Remember me</label>
                            </div>
                            <a class="link-secondary small d-inline-flex align-items-center" href="Account/ForgotPassword">
                                <i class="bi bi-question-circle me-1"></i>
                                Forgot password?
                            </a>
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100 d-inline-flex align-items-center justify-content-center">
                            <i class="bi bi-box-arrow-in-right me-2"></i>
                            Log in
                        </button>

                        <hr class="my-4" />

                        <div class="d-flex flex-column gap-2">
                            <a class="btn btn-outline-secondary d-inline-flex align-items-center justify-content-center"
                               href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                <i class="bi bi-person-plus me-2"></i>
                                Register as a new user
                            </a>
                            <a class="btn btn-outline-secondary d-inline-flex align-items-center justify-content-center" href="Account/ResendEmailConfirmation">
                                <i class="bi bi-envelope-check me-2"></i>
                                Resend email confirmation
                            </a>
                        </div>
                    </EditForm>
                </div>
            </section>

            @* <section class="text-center mt-4">
                <h6 class="text-body-secondary text-uppercase fw-semibold mb-2">Or sign in with</h6>
                <ExternalLoginPicker />
            </section> *@
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool showPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private void ToggleShowPassword() => showPassword = !showPassword;

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
